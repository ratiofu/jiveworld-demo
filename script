https://github.com/jivesoftware/jive-persistence-mongo/issues/2

Tile Styles: https://community.jivesoftware.com/docs/DOC-124346
Tile Actions: https://community.jivesoftware.com/docs/DOC-129789
Using Nitrous: https://community.jivesoftware.com/docs/DOC-123753

- : talk
$ : execute
> : edit
# : browse


$ Fire up a brand new nitrous box

[ Intro ]
[0:00]

- Thomas is going to get a bit of a head start
- Most of you have already done what he's doing; creating a Nitrous.io box and installing the jive-sdk
- we're going to assume you're somewhat familiar with node.js and javascript
- even if you're not, this should be pretty easy to follow and pickup


$ cd workspace
$ npm install -g jive-sdk

- while that's happening, let me explain what we're building
- we're pretending there's a remote system that returns some meaningful measurement
- lower numbers are better; ping response or load time, open issues, idle cash . . . whatever
- envision something from your companies environment; web service, html page, api . . . whatever
- for the demo, we're going to create a web service that returns random numbers within a range

- for our tile integrations, we're going to create a middleware server with the jive-sdk
- we could have done this in Java, C#, Ruby . . . whatever
- jive-sdk just makes it really easy . . . and fun

[3:00] (maximize screen)

$ jive-sdk help
$ jive-sdk list services
$ jive-sdk create example-service --name="performanceservice"
- show app.js

[4:00]

- let's do 2) first, lest we forget

> set tab to 4

> jiveclientconfiguration.json:
  - change port to 3000 (maps to 80 on nitrous) ?? try with 80 ??
  - change URL to the nitrous.io box host name
- ?? development = true means the box allows service access from any machine

[5:00]

$ npm update

- jive-sdk is built on top of express 3, but the SDK auto-discovers routes
- we're actually going to look at a couple of different ways to create routes and endpoints
- we'll start with a simple "hello" endpoint to see the easiest way to do this

# delete service/performanceservice/definition.json
# delete public folder

- let's see if the basics work

[7:00]

$ node app.js
# (click Preview) <host>/performanceservice/hello

- alright, that looks good, so now let's write the service that give use back a random number

> services/performanceservice/backend/routes/explicit_routes.js:
  - the name of the export is the name of the explicit endpoint, let's name it "last"
  - we'll just generate a random number in the range 1 to 2300
    Math.round(Math.random() * 2299) + 1
  - jive.logger.info to log what we're sending ... needs var jive = require('jive-sdk')
  - make sure we're returning a String or express gets confused

> delete services.js
$ node app.js
# host:3000/performanceservice/last

[11:00]

[ Building a Tile ]

- cool, that's our 'remote' service we're going to integrate in a Purposeful Place
- let's create a tile

$ jive-sdk list tiles
$ jive-sdk create tile-gauge --name="performance-tile"
$ npm update

> delete readme.html
> edit definition.json:
  #021677 #5a2bac #0088e1 #00c4dc
  Trouble! Slow! Good Fast
  "message": "Remote Service Performance"
  "displayName": "Remote Performance"
  "description": "Shows performance indicators of a remote service"
  ! add the action and explain why
> cheating with lib.js:
  
> datapusher.js:
  sections = require("../definition.json").sampleData

[18:00]

- file can be named anything, what's important is the exports

> pull exports to the top

- .task: explain what exports.task does, change the interval to 5000 for demo purposes
- .eventHandlers ...

- because we're reusing the tile definition for the sections, we
  won't need the following functions  
  > delete createSections
  > delete getSectionColor
 
- set up the section ranges as arrays, and explain that this is easier than using keys

> configure/get.js
  - clean up code a bit

$ rename main.js to config.js

# delete main.css and use /public/stylesheets/style.css instead
  body {
      background-color: #eee;
      margin:20px;
  }
  label, p { display: block; margin: 0.4em 0; }
  label input, label strong { display: inline-block; width: 4em; text-align: right; }
  button { font-size: 1.15em; font-weight: bold }

> configuration.html
  - change the form (explain indexes)

> main.js
  TODO (don't rename!!)

[25:00]

[ Deploying a Tile ]

- extension_src: automatically created and packaged into extension.zip every time you start up
- to name our add-on with something than the generated values, go to db/jiveExtension.json
> "name": "JiveWorld Purposeful Places Add-on",
  "description": "Jive Node SDK-based integrations session demo"
$ node app.js
- install add-on > avatar > Add-ons > Upload Package > ...
- in our case, where we're using the default file-based Jive persistence, the Jive instance's registration information show up in the db folder

[28:00]

[ Adding a Tile Action ]

- let's add an action to the tile

> new get.js
> new action.html
> new action.js
> update datapusher.js to return action URL and 

- funkiness with action context: have to deserialize twice

[38:00]

[ Adding a Stream Integration ]

$ jive-sdk list tiles
$ jive-sdk create tile-activity --name="performance-notification"

> templates.json
  - using a template
  - add the performance-notification
  - nice names

> customize stream integration

$ node app.js
- upload new package


[??:00]


    TODO create a new place based on the addons template

    TODO add the gauge tile to MyPage
