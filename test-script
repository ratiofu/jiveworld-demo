- : talk
$ : execute
> : edit
# : browse

[ Intro ]

$ nitrous            
$ cd workspace

$ npm install -g jive-sdk

[ Using the examples ]
- first, let's look at building our first tile from an example

$ jive-sdk create tile-gauge --name="performance-tile"

> jiveclientconfiguration.json (url, port, extensionInfo)
$ npm update
$ node app.js

- here's our tile

[ Modify example tile ]

> datapusher.js

- Cool, but problems
- Config is wrong
- New tiles are wrong
(remove everything from sandbox)

[ Let's create our fake service ]
$ jive-sdk create example-service --name="performanceservice"
$ npm update

- jive-sdk auto discovers routes
- makes it easy to create routes for allowing Jive to call you config UI and other endpoints
- let's look at the routes that come with this example

- opps
> delete definition
- better

> delete other extras

- let's create our fake service

> explicit_route.js . . . add random number generator
$ node app.js

- whoo hoo

[ Upgrade our tile ]

- let's look at the changes that will make our tile use our new service
$ cd ../
$ mkdir tmp
$ cd tmp
$ git clone https://github.com/tjconsult/jiveworld-demo.git repo     

- let's look at the changes that will make our tile use our new service
# (compare files)

$ cp -R ../tmp/repo/tmp/v1/* .
$ npm update
$ node app.js
(redeploy)

- ohhhhs and ahhhhs

[ Add Tile Action ]
- Let's examine the changes we'll be making

$ cp -R ../tmp/repo/tmp/v2/* .
$ node app.js

- Checkout the action

$ (remove everything from sandbox)

[ Add Stream Integration ]

$ jive-sdk create tile-activity --name="performance-notification"
$ npm update
> templates.json
> definition.json (displayName and description)
(redeploy)

$ cp -R ../tmp/repo/tmp/v3/* .

